  // const processPRs = () => {
  //   let score = 0;
  //   let difficultyMap = new Map([
  //     ["syn-easy", 0],
  //     ["syn-medium", 0],
  //     ["syn-hard", 0],
  //   ]);

  //   const PRs = [];
  //   for (let PR of PRInfo) {
  //     const difficulty = getDifficulty(PR.labels);
  //     score += scoreMap.get(difficulty);
  //     difficultyMap.set(difficulty, difficultyMap.get(difficulty) + 1);

  //     PRs.push({
  //       link: PR.html_url,
  //       title: PR.title,
  //       difficulty: difficulty.split("-")[1],
  //       repo: getRepo(PR.repository_url),
  //     });
  //   }
  //   // console.log(PRs);
  //   const result = [...difficultyMap.entries(), score];

  //   setPRArray(PRs);
  //   return result;
  // };

  // const processIssues = () => {
  //   let score = 0;
  //   const issues = [];
  //   for (let issue of issueInfo) {
  //     score += 4;
  //     issues.push({
  //       link: issue.html_url,
  //       title: issue.title,
  //       repo: getRepo(issue.repository_url),
  //     });
  //   }
  //   // console.log(issues);
  //   setIssueArray(issues);
  //   return score;
  // };
  
    const getRepo = (url) => {
    return url.split("/")[url.split("/").length - 1];
  };

  const getDifficulty = (labels) => {
    for (let label of labels) {
      if (scoreMap.has(label.name)) {
        return label.name;
      }
    }
  };

  const getIncrement = (labels) => {
    for (let label of labels) {
      if (scoreMap.has(label.name)) {
        return scoreMap.get(label.name);
      }
    }

    return 0;
  };

  // const processPRs = (userMap) => {
  //   for (let PR of PRInfo) {
  //     const increment = getIncrement(PR.labels);
  //     const difficulty = getDifficulty(PR.labels);

  //     if (increment > 0) {
  //       if (userMap.has(PR.user.login)) {
  //         const updateData = userMap.get(PR.user.login);
  //         updateData.score += increment;
  //         updateData.pr++;
  //         updateData.PRs.push({
  //           link: PR.html_url,
  //           title: PR.title,
  //           difficulty: difficulty.split("-")[1],
  //           repo: getRepo(PR.repository_url),
  //         });

  //         userMap.set(PR.user.login, updateData);
  //       } else {
  //         const data = {
  //           image: PR.user.avatar_url,
  //           pr: 1,
  //           issue: 0,
  //           score: increment,
  //           PRs: [
  //             {
  //               link: PR.html_url,
  //               title: PR.title,
  //               difficulty: difficulty.split("-")[1],
  //               repo: getRepo(PR.repository_url),
  //             },
  //           ],
  //           issues: [],
  //         };
  //         userMap.set(PR.user.login, data);
  //       }
  //     }
  //   }
  // };

  // const processIssues = (userMap) => {
  //   for (let issue of issueInfo) {
  //     if (userMap.has(issue.user.login)) {
  //       const updateData = userMap.get(issue.user.login);
  //       updateData.score += 4;
  //       updateData.issue++;
  //       updateData.issues.push({
  //         link: issue.html_url,
  //         title: issue.title,
  //         repo: getRepo(issue.repository_url),
  //       });
  //       userMap.set(issue.user.login, updateData);
  //     } else {
  //       const data = {
  //         image: issue.user.avatar_url,
  //         pr: 0,
  //         issue: 1,
  //         score: 4,
  //         issues: [
  //           {
  //             link: issue.html_url,
  //             title: issue.title,
  //             repo: getRepo(issue.repository_url),
  //           },
  //         ],
  //         PRs: [],
  //       };
  //       userMap.set(issue.user.login, data);
  //     }
  //   }
  // };

  const processData = (currentUser) => {
    // console.log(currentUser);

    const newData = { ...currentUser };
    const userPrs = newData.PRs;
    // console.log(userPrs);
    let diffMap = new Map([
      ["very_easy", 0],
      ["easy", 0],
      ["medium", 0],
      ["hard", 0],
    ]);

    for (let PR of userPrs) {
      diffMap.set(PR.difficulty, diffMap.get(PR.difficulty) + 1);
    }
    newData.easy = diffMap.get("easy");
    newData.medium = diffMap.get("medium");
    newData.hard = diffMap.get("hard");
    newData.very_easy = diffMap.get("very_easy");
    console.log(newData);
    setUserInfo(newData);
  };
  
  
  
  
   // const refactorData = () => {
  //   const userMap = new Map();

  //   for (var j = 0; j < PRInfo.length; j++) {
  //     if (PRInfo[j].labels.length > 0) {
  //       let increment = 0;
  //       for (let label of PRInfo[j].labels) {
  //         if (scoreMap.has(label.name)) {
  //           increment = scoreMap.get(label.name);
  //           break;
  //         }
  //       }

  //       console.log(increment);

  //       if (increment > 0) {
  //         if (userMap.has(PRInfo[j].user.login)) {
  //           const oldData = userMap.get(PRInfo[j].user.login);
  //           const newData = { ...oldData };
  //           newData.score = newData.score + increment;
  //           newData.pr++;
  //           userMap.set(PRInfo[j].user.login, newData);
  //         } else {
  //           const data = {
  //             image: PRInfo[j].user.avatar_url,
  //             pr: 1,
  //             issue: 0,
  //             score: increment,
  //           };
  //           userMap.set(PRInfo[j].user.login, data);
  //         }
  //       }
  //     }
  //     // console.log(userMap);
  //     // console.log(PRInfo);
  //   }

  //   for (var j = 0; j < issueInfo.length; j++) {
  //     if (userMap.has(issueInfo[j].user.login)) {
  //       const oldData = userMap.get(issueInfo[j].user.login);
  //       const newData = { ...oldData };
  //       newData.score = newData.score + 4;
  //       newData.issue++;
  //       userMap.set(issueInfo[j].user.login, newData);
  //     } else {
  //       const data = {
  //         image: issueInfo[j].user.avatar_url,
  //         pr: 0,
  //         issue: 1,
  //         score: 4,
  //       };
  //       userMap.set(issueInfo[j].user.login, data);
  //     }

  //     // console.log(userMap);
  //     // console.log(PRInfo);
  //   }

  //   console.log([...userMap.entries()]);
  //   store.dispatch(boardActions.setLeaderBoardData([...userMap.entries()]));

  //   setData([...userMap.entries()]);
  // };
  
  
  
  
  
  
  